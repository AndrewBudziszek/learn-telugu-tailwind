{"version":3,"sources":["components/QuizCard.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["QuizCard","handleClick","e","isCorrect","preventDefault","alert","className","onClick","App","useState","quizStarted","setQuizStarted","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0KA6CeA,MAxCf,WACI,SAASC,EAAYC,EAAQC,GACzBD,EAAEE,iBACED,EACAE,MAAM,YAENA,MAAM,aAId,OACI,qBAAKC,UAAU,0FAAf,SACI,sBAAKA,UAAU,aAAf,UACI,+CACA,mBAAGA,UAAU,oCAAb,wFAGA,sBAAKA,UAAU,eAAf,UACI,4BACI,wBAAQA,UAAU,2HACdC,QAAS,SAAAL,GAAC,OAAID,EAAYC,GAAG,IADjC,mEAGJ,4BACI,wBAAQI,UAAU,2HACdC,QAAS,SAAAL,GAAC,OAAID,EAAYC,GAAG,IADjC,mEAGJ,4BACI,wBAAQI,UAAU,2HACdC,QAAS,SAAAL,GAAC,OAAID,EAAYC,GAAG,IADjC,mEAGJ,4BACI,wBAAQI,UAAU,2HACdC,QAAS,SAAAL,GAAC,OAAID,EAAYC,GAAG,IADjC,4ECDTM,MA/Bf,WACE,MAAsCC,oBAAS,GAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KAEA,OACE,sBAAKL,UAAU,yHAAf,UACI,mBAAGA,UAAU,wCAAb,yBAGCI,GACC,qCACE,cAAC,EAAD,IACA,wBACEJ,UAAU,yEACVC,QAAS,kBAAMI,GAAe,IAFhC,0BAQFD,GACA,wBACEJ,UAAU,yEACVC,QAAS,kBAAMI,GAAe,IAFhC,4BCZUC,QACW,cAA7BC,OAAOC,SAASC,UAEa,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZJC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.68b39fa9.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n//QuizCard Props\r\n\r\n// QuizCard Component\r\nfunction QuizCard() {\r\n    function handleClick(e: any, isCorrect: boolean) {\r\n        e.preventDefault();\r\n        if (isCorrect) {\r\n            alert(`Correct!`);\r\n        } else {\r\n            alert(`Incorrect`);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"max-w-sm mx-auto flex items-center justify-center p-6 bg-white rounded-lg shadow-xl m-6\">\r\n            <div className=\"text-black\">\r\n                <strong>Translate</strong>\r\n                <p className=\"text-green-500 text-3xl font-bold\">\r\n                    ఇది నమూనా వచనం\r\n                </p>\r\n                <div className=\"buttons py-2\">\r\n                    <p>\r\n                        <button className=\"bg-white-500 mb-2 hover:bg-green-400 hover:text-white text-green-500 font-bold py-2 px-4 rounded border border-green-400\"\r\n                            onClick={e => handleClick(e, false)}>Lorem ipsum dolor sit amet, consectetur adipiscing.</button>\r\n                    </p>\r\n                    <p>\r\n                        <button className=\"bg-white-500 mb-2 hover:bg-green-400 hover:text-white text-green-500 font-bold py-2 px-4 rounded border border-green-400\"\r\n                            onClick={e => handleClick(e, true)}>Lorem ipsum dolor sit amet, consectetur adipiscing.</button>\r\n                    </p>\r\n                    <p>\r\n                        <button className=\"bg-white-500 mb-2 hover:bg-green-400 hover:text-white text-green-500 font-bold py-2 px-4 rounded border border-green-400\"\r\n                            onClick={e => handleClick(e, false)}>Lorem ipsum dolor sit amet, consectetur adipiscing.</button>\r\n                    </p>\r\n                    <p>\r\n                        <button className=\"bg-white-500 mb-2 hover:bg-green-400 hover:text-white text-green-500 font-bold py-2 px-4 rounded border border-green-400\"\r\n                            onClick={e => handleClick(e, false)}>Lorem ipsum dolor sit amet, consectetur adipiscing.</button>\r\n                    </p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default QuizCard;","import React, { useState } from 'react';\nimport QuizCard from './components/QuizCard';\n\n\nfunction App() {\n  const [quizStarted, setQuizStarted] = useState(false);\n\n  return (\n    <div className=\"flex flex-col h-screen items-center justify-center text-white bg-gradient-to-br from-gray-600 via-teal-700 to-gray-800\">\n        <p className=\"text-3xl text-green-500 font-bold p-6\">\n          Telugu Quiz\n        </p>\n        {quizStarted &&\n          <>\n            <QuizCard />\n            <button\n              className=\"bg-green-500 hover:bg-green-400 text-white fond-bold py-2 px-4 rounded\"\n              onClick={() => setQuizStarted(false)}\n            >\n              End Quiz\n            </button>\n          </>\n        }\n        {!quizStarted &&\n          <button\n            className=\"bg-green-500 hover:bg-green-400 text-white fond-bold py-2 px-4 rounded\"\n            onClick={() => setQuizStarted(true)}\n          >\n            Start Quiz\n          </button>\n        }\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}